const express = require("express");
const Logger=require('./../connect/logg');
const USER=require('./../models/user');
const ALLBOOKING=require('./../models/allBooking');
const userBooking = express.Router();
const nodemailer=require("nodemailer");


// using node mailer transporter object 
// transporter object is then used to create connection with the mailing service 
//the mailing service to send mails to the users who have booked the cab

var transporter=nodemailer.createTransport({
    host:'smtp.gmail.com',
    port:587,
    secure:false,
    // service:"gmail",  //service you want to use
    auth:{
        user:"salujapranav12@gmail.com",      // my other email id to send mails to the user
        pass:"yihr nyjn oopl rsrd"  //  app password generated by google
    }
})


const dateObject = new Date(); // creating date and time object for the timestamp



// update-user-booking route adds the user to the USER schema who have booked the cab 
// Records maximum detail of the drive and sends the confermation email to the user about the booking

userBooking.post("/update-user-booking", async (req, res) => {
    var email=req.body.email;
    var cab_obj=req.body.obj;
    const hours=dateObject.getHours();
    const minutes=dateObject.getMinutes();
    const seconds=dateObject.getSeconds();
    const date=(`0 ${dateObject.getDate()}`).slice(-2);
    const month=(`0 ${dateObject.getMonth()+1}`).slice(-2);
    const year=dateObject.getFullYear();
    var timestamp=`${year}-${month}-${date} ${hours}:${minutes}:${seconds}`;  //creating a seprate time stamp to check if user has already booked the cab 
    cab_obj["booking_time"]=timestamp
    cab_obj["user_journey_time"]=req.body.total_time
    cab_obj["user_total_price"]=req.body.total_price
    cab_obj["user_source"]=req.body.source
    cab_obj["user_destinations"]=req.body.dest
    try
    {
        //checking if user already exist or not
        const ele1=await USER.findOne({user_email:email}).exec();
        if(ele1===null) // if user is a new customer
        {
            const ele=await USER.insertMany([
            {
                user_email:email
            }]);
            const check_email1 = { user_email: email };
			const check_update1= 
			{ $push: 
				{ user_cabs: cab_obj } 
			}

            //updating the schema for user's detail
            const ele3=await USER.findOneAndUpdate(check_email1,check_update1);

            //updating the schema of allbookings
            const ele4=await ALLBOOKING.insertMany([
            {
                cab_name:cab_obj["cab_name"],
                cab_price:cab_obj["user_total_price"],
                cab_image:cab_obj["cab_image"],
                cab_type:cab_obj["cab_type"],
                cab_seats:cab_obj["cab_seats"],
                user_email:email
            }]);

            //setting up mailoptions and template of the mail
            var mailOptions={
                from:"salujapranav12@gmail.com",
                to:email,
                subject:"Booking Confirmed!!",
                text:`Booking Confirmed ${cab_obj["cab_name"]},\n Total price of Trip = Rs${cab_obj["user_total_price"]}/-only,\n User Email: ${email},\n date&time : ${cab_obj["booking_time"]}`
            }

            //mail sender function
            transporter.sendMail(mailOptions,function(error,info){
                if(error)
                {
                    Logger.Logg.error(error)
                }
                else
                {
                    Logger.Logg.success("Email Sent : "+info.response);
                }
            })
            Logger.Logg.success("user CREATED, data added SUCCESSFULLY");
            res.status(200).send({message:"InsertUpdateSuccess",data:email})
        }
        else //user is an old customer
        {
            var li=ele1.user_cabs[ele1.user_cabs.length-1]
            var li1=li.booking_time.split(" ")
            var li2=timestamp.split(" ")
            var t1=li1[li1.length-1] 
            var t2=li2[li2.length-1]        
            var tt1=t1.split(":")
            var tt2=t2.split(":")
            var time1=parseInt(tt1[1])
            var time2=parseInt(tt2[1])
            var hour1=parseInt(tt1[0])
            var hour2=parseInt(tt2[0])
            var ansTime=time2-time1

            //checking the time for booking as if the user tries to book 2 cabs at the same time
            //this constraing check will stop the user form doing so
            if(hour2===hour1)
            {
                if(ansTime<req.body.total_time) //checking the timestamp of the user's last booking and the real time 
                {
                    res.status(200).send({message:"Already In a Cab!!",data:false})
                    return
                }
            }
            const check_email1 = { user_email: email };
            const check_update1= 
            { $push: 
                { user_cabs: cab_obj } 
            }

            //updating the users cab section of the latest booking
            const ele3=await USER.findOneAndUpdate(check_email1,check_update1);

            //updating the allbooking schem for the latest booking
            const ele4=await ALLBOOKING.insertMany([
            {
                cab_name:cab_obj["cab_name"],
                cab_price:cab_obj["user_total_price"],
                cab_image:cab_obj["cab_image"],
                cab_type:cab_obj["cab_type"],
                cab_seats:cab_obj["cab_seats"],
                user_email:email
            }]);


            //setting up mailoptions and template of the mail
            var mailOptions={
                from:db_elements.db_email,
                to:email,
                subject:"Cab Booking Confirmed!!",
                text:`Booking Confirmed ${cab_obj["cab_name"]},\n Total price of Trip = Rs${cab_obj["user_total_price"]}/-only,\n User Email: ${email},\n date&time : ${cab_obj["booking_time"]}`
            }


            //mail sender function
            transporter.sendMail(mailOptions,function(error,info){
                if(error)
                {
                    Logger.Logg.error(error)
                }
                else
                {
                    Logger.Logg.success("Email Sent : "+info.response);
                }
            })
            Logger.Logg.success("data UPDATED SUCCESSFULLY");
            res.status(200).send({message:"UpdateSuccess",data:email})
            
        }
        
    }
    catch (error) 
	{
		Logger.Logg.error(error.message)
        res.status(404).json({message:error.message});
    }
})





// fetching all the user's for the admin display
// this api gives full detail about the user

userBooking.get("/user/get-data", async (req, res) => {
	try 
	{

        //getting all the users form teh USER schema
        const ele=await USER.find().exec();
		
        if(ele!==null)
		{
			res.status(200).send({message:"fetchSuccess",data:ele});
			Logger.Logg.success("all user FetchSuccess")
		}
		else
		{
			Logger.Logg.error("all user FetchFailed")
			res.status(200).send({message:"fetchFailed",data:{}});
		}
    }
	catch (error) 
	{
		Logger.Logg.error(error.message)
        res.status(404).json({message:error.message});
    }
})


module.exports = userBooking